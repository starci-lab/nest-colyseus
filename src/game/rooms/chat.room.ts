import { Room, Client } from 'colyseus';
import { ChatRoomState, Player, Message } from './schemas/chat-room.schema';

export class ChatRoom extends Room<ChatRoomState> {
  maxClients = 50;
  state = new ChatRoomState();
  onCreate(options: any) {
    // Thi·∫øt l·∫≠p t√™n room n·∫øu c√≥
    if (options?.roomName) {
      this.state.roomName = options.roomName;
    }

    console.log(`[Room Created] ${this.roomId} - ${this.state.roomName}`);

    // Giao ti·∫øp client ‚Üí server
    this.onMessage('message', (client, data: { message: string }) => {
      console.log(`üì© Message from ${client.sessionId}: ${data.message}`);

      // T·∫°o message m·ªõi
      const newMessage = new Message();
      newMessage.id = `${Date.now()}_${client.sessionId}`;
      newMessage.sender = client.sessionId;
      newMessage.senderName =
        this.state.players.get(client.sessionId)?.name || 'Anonymous';
      newMessage.content = data.message;
      newMessage.timestamp = Date.now();

      // Th√™m message v√†o state
      this.state.messages.push(newMessage);

      // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng message (gi·ªØ 100 message g·∫ßn nh·∫•t)
      if (this.state.messages.length > 100) {
        this.state.messages.shift();
      }
    });

    // X·ª≠ l√Ω khi client ƒë·ªïi t√™n
    this.onMessage('changeName', (client, data: { name: string }) => {
      const player = this.state.players.get(client.sessionId);
      if (player && data.name && data.name.trim()) {
        const oldName = player.name;
        player.name = data.name.trim();

        // G·ª≠i th√¥ng b√°o h·ªá th·ªëng
        const systemMessage = new Message();
        systemMessage.id = `${Date.now()}_system`;
        systemMessage.sender = 'system';
        systemMessage.senderName = 'System';
        systemMessage.content = `${oldName} ƒë√£ ƒë·ªïi t√™n th√†nh ${player.name}`;
        systemMessage.timestamp = Date.now();
        systemMessage.type = 'system';

        this.state.messages.push(systemMessage);
      }
    });
  }

  onJoin(client: Client, options: any) {
    console.log(`‚úÖ Client joined: ${client.sessionId}`);

    // T·∫°o player m·ªõi
    const player = new Player();
    player.sessionId = client.sessionId;
    player.name = options?.name || `Player_${client.sessionId.substring(0, 6)}`;
    player.joinedAt = Date.now();
    player.isOnline = true;

    // Th√™m player v√†o state
    this.state.players.set(client.sessionId, player);

    // G·ª≠i welcome message
    client.send('welcome', {
      message: `Ch√†o m·ª´ng ${player.name} ƒë·∫øn v·ªõi ph√≤ng chat!`,
      roomId: this.roomId,
      roomName: this.state.roomName,
      playerCount: this.state.players.size,
      timestamp: Date.now(),
    });

    // G·ª≠i th√¥ng b√°o h·ªá th·ªëng cho t·∫•t c·∫£ ng∆∞·ªùi ch∆°i
    const joinMessage = new Message();
    joinMessage.id = `${Date.now()}_system`;
    joinMessage.sender = 'system';
    joinMessage.senderName = 'System';
    joinMessage.content = `${player.name} ƒë√£ tham gia ph√≤ng chat`;
    joinMessage.timestamp = Date.now();
    joinMessage.type = 'system';

    this.state.messages.push(joinMessage);

    // G·ª≠i danh s√°ch players hi·ªán t·∫°i cho client m·ªõi
    client.send('playerList', {
      players: Array.from(this.state.players.values()).map((p) => ({
        sessionId: p.sessionId,
        name: p.name,
        isOnline: p.isOnline,
        joinedAt: p.joinedAt,
      })),
    });
  }

  onLeave(client: Client, consented?: boolean) {
    console.log(
      `üëã Client left: ${client.sessionId} (consented: ${consented})`,
    );

    const player = this.state.players.get(client.sessionId);
    if (player) {
      // ƒê√°nh d·∫•u player offline
      player.isOnline = false;

      // G·ª≠i th√¥ng b√°o h·ªá th·ªëng
      const leaveMessage = new Message();
      leaveMessage.id = `${Date.now()}_system`;
      leaveMessage.sender = 'system';
      leaveMessage.senderName = 'System';
      leaveMessage.content = `${player.name} ƒë√£ r·ªùi ph√≤ng chat`;
      leaveMessage.timestamp = Date.now();
      leaveMessage.type = 'system';

      this.state.messages.push(leaveMessage);

      // X√≥a player kh·ªèi state sau 30 gi√¢y (trong tr∆∞·ªùng h·ª£p reconnect)
      setTimeout(() => {
        this.state.players.delete(client.sessionId);
      }, 30000);
    }
  }

  onError(client: Client, err: Error) {
    console.error(`‚ùå Error from ${client.sessionId}:`, err);
  }

  onDispose() {
    console.log(`üóëÔ∏è Room disposed: ${this.roomId} - ${this.state.roomName}`);

    // Cleanup logic n·∫øu c·∫ßn
    this.state.isActive = false;
  }
}
